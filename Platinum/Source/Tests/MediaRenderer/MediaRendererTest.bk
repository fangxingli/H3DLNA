/*----------------------------------------------------------------------
|   includes
+---------------------------------------------------------------------*/
#include "MediaRendererTest.h"


#ifdef ROUTON
/*
 * OnSet*: Server=>Renderer=>Player action->GetArgumentValue ( ArgumentDirction: In  )
 * OnGet*: Player=>Renderer=>Server action->SetArugmentValue ( ArgumentDirction: Out  )
 */
PLT_ROUTON_H3::PLT_ROUTON_H3(class cRenderer *p, 
		const char * friendly_name, 
		bool show_ip, 
		const char *uuid, 
		unsigned int port, 
		bool port_rebind) : 
	PLT_MediaRenderer(friendly_name, show_ip, uuid, port, port_rebind),
	mplayer(p)
{
}
	
	// Connection Manager
	// NPT_Result OnGetCurrentConnectionInfo(PLT_ActionReference &action) { }

	// AVTransport
NPT_Result PLT_ROUTON_H3::OnGetPositionInfo(PLT_ActionReference& action)
{  
	float duration_f=0.0, position_f=0.0;
	char duration_s[8], position_s[8];
	if( mplayer->routon_mplayer_is_running() )
		mplayer->routon_get_scrub(&duration_f, &position_f);
	Float2Time(duration_f, duration_s);
	Float2Time(position_f, position_s);

	NPT_String uri, metadata;
	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->GetStateVariableValue("AVTransportURI", uri);
	serviceAVT->GetStateVariableValue("AVTransportURIMetaData", metadata);
	//printf("$$$$$$$$$$$$$$$$$$AVTransportURI: %s, AVTransportURIMetaData: %s$$$$$$$$$$$$$$$$$$$$$$$$$$\n", uri.GetChars(), metadata.GetChars());

	printf("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Duration: %f(%s), position: %f(%s)\n",duration_f, duration_s, position_f, position_s);
	NPT_CHECK_WARNING(action->SetArgumentValue("Track", "1"));
	NPT_CHECK_WARNING(action->SetArgumentValue("TrackDuration", duration_s));
	NPT_CHECK_WARNING(action->SetArgumentValue("TrackMetaData", metadata));
	NPT_CHECK_WARNING(action->SetArgumentValue("TrackURI", uri));
	NPT_CHECK_WARNING(action->SetArgumentValue("RelTime", position_s));//one media relative time
	NPT_CHECK_WARNING(action->SetArgumentValue("AbsTime", position_s));//all media time 
	NPT_CHECK_WARNING(action->SetArgumentValue("RelCount", "26333"));
	NPT_CHECK_WARNING(action->SetArgumentValue("AbsCount", "26333"));

	return NPT_SUCCESS;  
}

NPT_Result PLT_ROUTON_H3::OnSetAVTransportURI(PLT_ActionReference& action)
{
	// default implementation is using state variable
	NPT_String uri;
	NPT_CHECK_WARNING(action->GetArgumentValue("CurrentURI", uri));

	NPT_String metadata;
	NPT_CHECK_WARNING(action->GetArgumentValue("CurrentURIMetaData", metadata));

	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));

	// update service state variables
	serviceAVT->SetStateVariable("AVTransportURI", uri);
	serviceAVT->SetStateVariable("AVTransportURIMetaData", metadata);
	printf("URI: %s, Length:%d\n", uri.GetChars(), strlen(uri.GetChars()));

	// check uri, if null then quit player
	// quit twice ,then SegError
	if( strlen(uri.GetChars()) == 0 ){
	//	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
		serviceAVT->SetStateVariable("TransportState", "NO_MEDIA_PRESENT");
		serviceAVT->SetStateVariable("TransportStatus", "OK");

		printf("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
		if( mplayer->routon_mplayer_is_running() )
			mplayer->routon_mplayer_quit();
		return NPT_SUCCESS;
	}

	if( !(mplayer->routon_mplayer_is_running()) ){
		mplayer->routon_mplayer_start();
	}
	serviceAVT->SetStateVariable("TransportState", "STOPPED");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	// just add the uri to list, then the Play Action is responsible for playing
	if( mplayer->routon_mplayer_is_running() )
		mplayer->routon_add_to_playlist((char *)(uri.GetChars()), 1);

	return NPT_SUCCESS;
}

NPT_Result PLT_ROUTON_H3::OnNext(PLT_ActionReference &action){ return NPT_SUCCESS; }

NPT_Result PLT_ROUTON_H3::OnPause(PLT_ActionReference &action)
{
	if( mplayer->routon_mplayer_is_running() )
		mplayer->routon_pause();

	// update service state variables
	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "PAUSED_PLAYBACK");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	return NPT_SUCCESS;  
}

/*
 *  GetProtocolInfo->Stop->GetVolume->GetMute->GetTransportInfo->Stop->SetAVTransportURI->Play
 */
NPT_Result PLT_ROUTON_H3::OnPlay(PLT_ActionReference &action)
{ 

	// update service state variables
	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "PLAYING");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	// invoke player
	if( !(mplayer->routon_mplayer_is_running()) ){
		mplayer->routon_mplayer_start();
	}

	if( mplayer->routon_mplayer_is_running() )
		mplayer->routon_play();

	return NPT_SUCCESS;  
}

NPT_Result PLT_ROUTON_H3::OnPrevious(PLT_ActionReference &action){ return NPT_SUCCESS;  }

NPT_Result PLT_ROUTON_H3::OnSeek(PLT_ActionReference &action)
{
	int h,m,s;
	//if( !routon_is_seekable() )
	//	return NPT_ERROR_NOT_IMPLEMENTED;

	// update service state variables
	PLT_Service* serviceAVT;

	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "TRANSITIONING");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	NPT_String unit;
	NPT_CHECK_WARNING(action->GetArgumentValue("Unit", unit));
	NPT_String target;
	NPT_CHECK_WARNING(action->GetArgumentValue("Target", target));
	//printf("$$$$$$$$$$$$$$$$$$Unit: %s, target: %s$$$$$$$$$$$$$$$$$$$$$$$$$$\n", unit.GetChars(), target.GetChars());

	sscanf(target.GetChars(), "%d:%d:%d", &h, &m, &s);
	if( mplayer->routon_mplayer_is_running() ){
		mplayer->routon_set_scrub(h*3600+m*60+s);
		mplayer->routon_play();
	}

	// update service state variables
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "PLAYING");//stateBeforeSeek.GetChars());
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	return NPT_SUCCESS;  
}

/*
 * 
 */
NPT_Result PLT_ROUTON_H3::OnStop(PLT_ActionReference &action)
{
	if( mplayer->routon_mplayer_is_running() ){
		mplayer->routon_set_scrub(0);
		//mplayer->routon_mplayer_quit();
		mplayer->routon_pause();
	}

	// update service state variables
	PLT_Service* serviceAVT;
	NPT_String current_state;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	// if current state is NO_MEDIA_PRESENT, the do nothing
	serviceAVT->GetStateVariableValue("TransportState", current_state);
	if( !strcmp(current_state.GetChars(), "NO_MEDIA_PRESENT") )
		return NPT_SUCCESS;  

	// the other states
	serviceAVT->SetStateVariable("TransportState", "STOPPED");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	return NPT_SUCCESS;  
}

//NPT_Result OnSetPlayMode(PLT_ActionReference &action){ return NPT_SUCCESS;  }

// Rendering Control
#if 1
NPT_Result PLT_ROUTON_H3::OnGetVolume(PLT_ActionReference &action)
{ 
	/*
	 * Here should get the mplayer volume and return to Controller
	 */
	NPT_CHECK_WARNING(action->SetArgumentValue("CurrentVolume", "10"));

	return NPT_SUCCESS;  
}
NPT_Result PLT_ROUTON_H3::OnGetMute(PLT_ActionReference &action)
{ 
	/*
	 * Here should get the mplayer mute and return to Controller
	 */
	NPT_CHECK_WARNING(action->SetArgumentValue("CurrentMute", "0"));

	return NPT_SUCCESS;  
}
#endif
NPT_Result PLT_ROUTON_H3::OnSetVolume(PLT_ActionReference &action)
{
	NPT_String volume;
	NPT_CHECK_WARNING(action->GetArgumentValue("DesiredVolume", volume));
	printf("Volume: %s\n", volume.GetChars());

	if( mplayer->routon_mplayer_is_running() )
		mplayer->routon_set_volume(atoi(volume.GetChars()));
	return NPT_SUCCESS;  
}

NPT_Result PLT_ROUTON_H3::OnSetVolumeDB(PLT_ActionReference &action){ return NPT_SUCCESS;  }
NPT_Result PLT_ROUTON_H3::OnGetVolumeDBRange(PLT_ActionReference &action){ return NPT_SUCCESS;  }
NPT_Result PLT_ROUTON_H3::OnSetMute(PLT_ActionReference &action)
{ 
	// maybe with error
	PLT_Service* serviceAVT;
	NPT_String mute, volume;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->GetStateVariableValue("CurrentMute", mute);
	serviceAVT->GetStateVariableValue("CurrentVolume", volume);

	if( !strcmp(mute, "0") ){// State: Mute
		if( mplayer->routon_mplayer_is_running() )
			mplayer->routon_set_volume(0);
		NPT_CHECK_WARNING(action->SetArgumentValue("DesiredMute", "1"));
	}else{	//State: umMute
		printf("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ CurrentVolume: %s $$$$$$$$$$$$$$$$$$$$$$$$$$$\n", volume.GetChars());
		if( mplayer->routon_mplayer_is_running() )
			mplayer->routon_set_volume(atoi(volume.GetChars()));
		NPT_CHECK_WARNING(action->SetArgumentValue("DesiredMute", "0"));
	}

	return NPT_SUCCESS;  
}

// By Lee

PLT_ROUTON_H3::~PLT_ROUTON_H3(){}
#endif

/*----------------------------------------------------------------------
|   globals
+---------------------------------------------------------------------*/
struct Options {
    const char* friendly_name;
} Options;

/*----------------------------------------------------------------------
|   PrintUsageAndExit
+---------------------------------------------------------------------*/
static void
PrintUsageAndExit(char** args)
{
    fprintf(stderr, "usage: %s [-f <friendly_name>]\n", args[0]);
    fprintf(stderr, "-f : optional upnp server friendly name\n");
    fprintf(stderr, "<path> : local path to serve\n");
    exit(1);
}

/*----------------------------------------------------------------------
|   ParseCommandLine
+---------------------------------------------------------------------*/
static void
ParseCommandLine(char** args)
{
    const char* arg;
    char**      tmp = args+1;

    /* default values */
    Options.friendly_name = NULL;

    while ((arg = *tmp++)) {
        if (!strcmp(arg, "-f")) {
            Options.friendly_name = *tmp++;
        } else {
            fprintf(stderr, "ERROR: too many arguments\n");
            PrintUsageAndExit(args);
        }
    }
}

/*----------------------------------------------------------------------
|   main
+---------------------------------------------------------------------*/
int
main(int /* argc */, char** argv)
{   
    PLT_UPnP upnp;

    /* parse command line */
    ParseCommandLine(argv);
    class cRenderer *player =  new cRenderer();

#ifdef ROUTON
	PLT_ROUTON_H3 *h3_renderer = new PLT_ROUTON_H3(player, Options.friendly_name?Options.friendly_name:"Platinum Media Renderer",
                              false,
                              "e6572b54-f3c7-2d91-2fb5-b757f2537e21");
	PLT_DeviceHostReference device(h3_renderer);
#endif
    upnp.AddDevice(device);
    bool added = true;

    upnp.Start();

#if 1
    char buf[256];
    while (gets(buf)) {
        if (*buf == 'q')
            break;

        if (*buf == 's') {
            if (added) {
                upnp.RemoveDevice(device);
            } else {
                upnp.AddDevice(device);
            }
            added = !added;
        }
    }
#endif

    upnp.Stop();
    return 0;
}
