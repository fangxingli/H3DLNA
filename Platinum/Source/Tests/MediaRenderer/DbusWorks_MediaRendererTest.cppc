/*
 * H3 DLNA Renderer
 * Author  : LiFangxing
 * Version : 1.0 , Date    : 2011.10.21
 */
#include "MediaRendererTest.h"

#ifdef ROUTON

int MessageProcess(char *sender, unsigned code, size_t len, const char *data)
{
        char tmp[64]="\0";
        switch(code){
                case MSG_ROUTON_GET_SCRUB_RET:
                        strcpy(tmp, "MSG_ROUTON_GET_SCRUB_RET");
			h3_renderer->m_Duration = ((float *)data)[0];
			h3_renderer->m_Position = ((float *)data)[1];
                        break;
                case MSG_ROUTON_MPLAYER_IS_RUNNING_RET:
                        strcpy(tmp, "MSG_ROUTON_MPLAYER_IS_RUNNING_RET");
			h3_renderer->m_RunningRet = ((int *)data)[0];
                        break;
                case MSG_ROUTON_IS_PLAYING_RET:
                        strcpy(tmp, "MSG_ROUTON_IS_PLAYING_RET");
			h3_renderer->m_PlayingRet = ((int *)data)[0];
                        break;
                default:
                        break;    
        }   
        printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Sender: %s code: %s data: %d len: %d\n", sender, tmp, *(int *)data, len);
	h3_renderer->m_MessageReceiveFlag = true;
	
        return 0;
}

/*
 * OnSet*: Server=>Renderer=>Player action->GetArgumentValue ( ArgumentDirction: In  )
 * OnGet*: Player=>Renderer=>Server action->SetArugmentValue ( ArgumentDirction: Out  )
 */
PLT_ROUTON_H3::PLT_ROUTON_H3(
		const char * friendly_name, 
		bool show_ip, 
		const char *uuid, 
		unsigned int port, 
		bool port_rebind) : 
	PLT_MediaRenderer(friendly_name, show_ip, uuid, port, port_rebind)
{
	m_MessageReceiveFlag = false;
	m_PlayingRet = 0;
	m_RunningRet = 0;
	m_Duration = 0.0;
	m_Position = 0.0;
}
	
	// Connection Manager
	// NPT_Result OnGetCurrentConnectionInfo(PLT_ActionReference &action) { }

	// AVTransport
NPT_Result PLT_ROUTON_H3::OnGetPositionInfo(PLT_ActionReference& action)
{  
	char duration_s[8]="\0", position_s[8]="\0";
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet )
		SendAndWaitMessage(MSG_ROUTON_GET_SCRUB);
		
	Float2Time(m_Duration, duration_s);
	Float2Time(m_Position, position_s);

	NPT_String uri, metadata, current_state;
	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->GetStateVariableValue("AVTransportURI", uri);
	serviceAVT->GetStateVariableValue("AVTransportURIMetaData", metadata);

	serviceAVT->GetStateVariableValue("TransportState", current_state);
	//printf("$$$$$$$$$$$$$$$$$$AVTransportURI: %s, AVTransportURIMetaData: %s$$$$$$$$$$$$$$$$$$$$$$$$$$\n", uri.GetChars(), metadata.GetChars());

	printf("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^State: %s, Duration: %f(%s), position: %f(%s)\n",current_state.GetChars(), m_Duration , duration_s, m_Position, position_s);
	NPT_CHECK_WARNING(action->SetArgumentValue("Track", "1"));
	NPT_CHECK_WARNING(action->SetArgumentValue("TrackDuration", duration_s));
	NPT_CHECK_WARNING(action->SetArgumentValue("TrackMetaData", metadata));
	NPT_CHECK_WARNING(action->SetArgumentValue("TrackURI", uri));
	NPT_CHECK_WARNING(action->SetArgumentValue("RelTime", position_s));//one media relative time
	NPT_CHECK_WARNING(action->SetArgumentValue("AbsTime", position_s));//all media time 
	NPT_CHECK_WARNING(action->SetArgumentValue("RelCount", "26333"));
	NPT_CHECK_WARNING(action->SetArgumentValue("AbsCount", "26333"));

	return NPT_SUCCESS;  
}

NPT_Result PLT_ROUTON_H3::OnSetAVTransportURI(PLT_ActionReference& action)
{
	// default implementation is using state variable
	NPT_String uri;
	NPT_CHECK_WARNING(action->GetArgumentValue("CurrentURI", uri));

	NPT_String metadata;
	NPT_CHECK_WARNING(action->GetArgumentValue("CurrentURIMetaData", metadata));

	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));

	/*
	 * update service state variables
	 * NOTE: the next SetState is necessary, because GetPositionInfo will get them
 	 */
	serviceAVT->SetStateVariable("AVTransportURI", uri);
	serviceAVT->SetStateVariable("AVTransportURIMetaData", metadata);
	printf("URI: %s, Length:%d\n", uri.GetChars(), strlen(uri.GetChars()));

	// check uri, if null then quit player
	if( strlen(uri.GetChars()) == 0 ){
		serviceAVT->SetStateVariable("TransportState", "NO_MEDIA_PRESENT");
		serviceAVT->SetStateVariable("TransportStatus", "OK");

		printf("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");
		SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
		if( m_RunningRet )// ##Note##: here we must quit from player
			tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_STOP, 0, NULL);
		return NPT_SUCCESS;
	}

	while( m_RunningRet == false){
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_MPLAYER_START, 0, NULL);
		SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	}//make sure that the player is running
	serviceAVT->SetStateVariable("NumberOfTracks", "1");
//	serviceAVT->SetStateVariable("TransportState", "STOPPED");
//	serviceAVT->SetStateVariable("TransportStatus", "OK");

	// just add the uri to list, then the Play Action is responsible for playing
	char data[512]="\0";
	((int *)data)[0] = 0;
        ((int *)data)[1] = strlen(uri.GetChars());
        sprintf(data+8, "%s", uri.GetChars());
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == true ){
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_ADD_TO_PLAYLIST, strlen(uri.GetChars())+8, data);	
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_PAUSE, 0, NULL);	
		SendAndWaitMessage(MSG_ROUTON_IS_PLAYING);
		if( m_PlayingRet == true ){
			serviceAVT->SetStateVariable("TransportState", "PLAYING");
			serviceAVT->SetStateVariable("TransportStatus", "OK");
		}
	}

	return NPT_SUCCESS;
}

NPT_Result PLT_ROUTON_H3::OnNext(PLT_ActionReference &action){ return NPT_SUCCESS; }

NPT_Result PLT_ROUTON_H3::OnPause(PLT_ActionReference &action)
{
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == true )
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_PAUSE, 0, NULL);

	// update service state variables
	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "PAUSED_PLAYBACK");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	return NPT_SUCCESS;  
}

/*
 *  GetProtocolInfo->Stop->GetVolume->GetMute->GetTransportInfo->Stop->SetAVTransportURI->Play
 */
NPT_Result PLT_ROUTON_H3::OnPlay(PLT_ActionReference &action)
{ 

	// update service state variables
	PLT_Service* serviceAVT;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "PLAYING");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	// invoke player
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == false )
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_MPLAYER_START, 0, NULL);

	SendAndWaitMessage(MSG_ROUTON_IS_PLAYING);
	if( m_PlayingRet == false )
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_PLAY , 0, NULL);

	return NPT_SUCCESS;  
}

NPT_Result PLT_ROUTON_H3::OnPrevious(PLT_ActionReference &action){ return NPT_SUCCESS;  }

NPT_Result PLT_ROUTON_H3::OnSeek(PLT_ActionReference &action)
{
	int h,m,s;
	char data[sizeof(int)] = "\0";
	// update service state variables
	PLT_Service* serviceAVT;

	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "TRANSITIONING");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	NPT_String unit;
	NPT_CHECK_WARNING(action->GetArgumentValue("Unit", unit));
	NPT_String target;
	NPT_CHECK_WARNING(action->GetArgumentValue("Target", target));
	//printf("$$$$$$$$$$$$$$$$$$Unit: %s, target: %s$$$$$$$$$$$$$$$$$$$$$$$$$$\n", unit.GetChars(), target.GetChars());

	sscanf(target.GetChars(), "%d:%d:%d", &h, &m, &s);
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == true ){
		*(int *)data = h*3600+m*60+s;
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_SET_SCRUB, sizeof(int), data);
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_PLAY , 0, NULL);
	}

	// update service state variables
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->SetStateVariable("TransportState", "PLAYING");//stateBeforeSeek.GetChars());
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	return NPT_SUCCESS;  
}

/*
 * 
 */
NPT_Result PLT_ROUTON_H3::OnStop(PLT_ActionReference &action)
{
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == true ){
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_STOP, 0, NULL);
		//mplayer->routon_set_scrub(0);
		//mplayer->routon_pause();
	}

	// update service state variables
	PLT_Service* serviceAVT;
	NPT_String current_state;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	// if current state is NO_MEDIA_PRESENT, the do nothing
	serviceAVT->GetStateVariableValue("TransportState", current_state);
	if( !strcmp(current_state.GetChars(), "NO_MEDIA_PRESENT") )
		return NPT_SUCCESS;  

	// the other states
	serviceAVT->SetStateVariable("TransportState", "NO_MEDIA_PRESENT");
	serviceAVT->SetStateVariable("TransportStatus", "OK");

	return NPT_SUCCESS;  
}

//NPT_Result OnSetPlayMode(PLT_ActionReference &action){ return NPT_SUCCESS;  }

// Rendering Control
#if 1
NPT_Result PLT_ROUTON_H3::OnGetVolume(PLT_ActionReference &action)
{ 
	/*
	 * Here should get the mplayer volume and return to Controller
	 */
	NPT_CHECK_WARNING(action->SetArgumentValue("CurrentVolume", "10"));

	return NPT_SUCCESS;  
}
NPT_Result PLT_ROUTON_H3::OnGetMute(PLT_ActionReference &action)
{ 
	/*
	 * Here should get the mplayer mute and return to Controller
	 */
	NPT_CHECK_WARNING(action->SetArgumentValue("CurrentMute", "0"));

	return NPT_SUCCESS;  
}
#endif
NPT_Result PLT_ROUTON_H3::OnSetVolume(PLT_ActionReference &action)
{
	char data[sizeof(int)] = "\0";
	NPT_String volume;
	NPT_CHECK_WARNING(action->GetArgumentValue("DesiredVolume", volume));
	printf("Volume: %s\n", volume.GetChars());

	*(int *)data = atoi(volume.GetChars());
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == true )
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_SET_VOLUME, sizeof(int), data);	
	return NPT_SUCCESS;  
}

NPT_Result PLT_ROUTON_H3::OnSetVolumeDB(PLT_ActionReference &action){ return NPT_SUCCESS;  }
NPT_Result PLT_ROUTON_H3::OnGetVolumeDBRange(PLT_ActionReference &action){ return NPT_SUCCESS;  }
NPT_Result PLT_ROUTON_H3::OnSetMute(PLT_ActionReference &action)
{ 
	// maybe with error
	char data[sizeof(int)] = "\0";
	PLT_Service* serviceAVT;
	NPT_String mute, volume;
	NPT_CHECK_WARNING(FindServiceByType("urn:schemas-upnp-org:service:AVTransport:1", serviceAVT));
	serviceAVT->GetStateVariableValue("CurrentMute", mute);
	serviceAVT->GetStateVariableValue("CurrentVolume", volume);
	printf("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ CurrentVolume: %s $$$$$$$$$$$$$$$$$$$$$$$$$$$\n", volume.GetChars());
	
	SendAndWaitMessage(MSG_ROUTON_MPLAYER_IS_RUNNING);
	if( m_RunningRet == true ){
		if( !strcmp(mute.GetChars(), "0") ){// Current State: unMute
			*(int *)data = 0;
			NPT_CHECK_WARNING(action->SetArgumentValue("DesiredMute", "1"));
		}else{	//Current State: Mute
			*(int *)data = atoi(volume.GetChars());
			NPT_CHECK_WARNING(action->SetArgumentValue("DesiredMute", "0"));
		}
		tnMessageSend(MODULE_ID_WEBTV, MSG_ROUTON_SET_VOLUME, sizeof(int), data);	
	}

	return NPT_SUCCESS;  
}

// By Lee

PLT_ROUTON_H3::~PLT_ROUTON_H3(){}
#endif

/*----------------------------------------------------------------------
|   globals
+---------------------------------------------------------------------*/
struct Options {
    const char* friendly_name;
} Options;

/*----------------------------------------------------------------------
|   PrintUsageAndExit
+---------------------------------------------------------------------*/
static void
PrintUsageAndExit(char** args)
{
    fprintf(stderr, "usage: %s [-f <friendly_name>]\n", args[0]);
    fprintf(stderr, "-f : optional upnp server friendly name\n");
    fprintf(stderr, "<path> : local path to serve\n");
    exit(1);
}

/*----------------------------------------------------------------------
|   ParseCommandLine
+---------------------------------------------------------------------*/
static void
ParseCommandLine(char** args)
{
    const char* arg;
    char**      tmp = args+1;

    /* default values */
    Options.friendly_name = NULL;

    while ((arg = *tmp++)) {
        if (!strcmp(arg, "-f")) {
            Options.friendly_name = *tmp++;
        } else {
            fprintf(stderr, "ERROR: too many arguments\n");
            PrintUsageAndExit(args);
        }
    }
}

/*----------------------------------------------------------------------
|   main
+---------------------------------------------------------------------*/
int
main(int /* argc */, char** argv)
{   
    PLT_UPnP upnp;

    /* parse command line */
    ParseCommandLine(argv);

    tnLoopInit(0);
    tnMessageInit("h3.DLNA", MessageProcess);

#ifdef ROUTON
	h3_renderer = new PLT_ROUTON_H3(Options.friendly_name?Options.friendly_name:"Platinum Media Renderer",
                              false,
                              "e6572b54-f3c7-2d91-2fb5-b757f2537e21");
	PLT_DeviceHostReference device(h3_renderer);
#endif
    upnp.AddDevice(device);
    bool added = true;

    upnp.Start();

    tnLoopRun();
#if 1
    char buf[256];
    while (gets(buf)) {
        if (*buf == 'q')
            break;

        if (*buf == 's') {
            if (added) {
                upnp.RemoveDevice(device);
            } else {
                upnp.AddDevice(device);
            }
            added = !added;
        }
    }
#endif

    upnp.Stop();

    return 0;
}
